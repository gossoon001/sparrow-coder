package $package_controller;

import $package_assemble.$persistence_class_nameAssemble;
import $package_vo.$persistence_class_nameVO;
import com.sparrow.protocol.BusinessException;
import $package_bo.$persistence_class_nameBO;
import $package_param.$persistence_class_nameParam;
import $package_query.$persistence_class_nameQuery;
import $package_service.$persistence_class_nameService;
import com.sparrow.protocol.BusinessException;
import com.sparrow.protocol.ListRecordTotalBO;
import com.sparrow.protocol.pager.SimplePager;
import com.sparrow.servlet.ServletContainer;
import com.sparrow.spring.starter.ModelAndViewUtils;
import com.sparrow.support.pager.HtmlPagerResult;
import javax.inject.Inject;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

@RestController
@RequestMapping("$persistence_object_name")
public class $persistence_class_nameController {

    @Inject
    private $persistence_class_nameService $persistence_object_nameService;

    @Inject
    private $persistence_class_nameAssemble $persistence_object_nameControllerAssemble;
    
    
    @Inject
    private ServletContainer servletContainer;
    
    @GetMapping("manage")
    public ModelAndView loadAll$persistence_class_names() {
            $persistence_class_nameBatchOperateParam batchOperateParam = ($persistence_class_nameBatchOperateParam) ModelAndViewUtils.flash("query");
            if (batchOperateParam != null) {
                return this.query$persistence_class_names(batchOperateParam);
            }
            SimplePager simplePager = new SimplePager();
            ListRecordTotalBO<$persistence_class_nameBO> $persistence_object_nameListTotalRecord = this.$persistence_object_nameService.queryAll$persistence_class_name();
            HtmlPagerResult<$persistence_class_nameVO> pager = this.$persistence_object_nameControllerAssemble.assembleHtmlPager($persistence_object_nameListTotalRecord, simplePager);
            ModelAndView mv = new ModelAndView("/$persistence_object_name/manage");
            mv.addObject("pager", pager);
            return mv;
        }
    
        private ModelAndView query$persistence_class_names($persistence_class_nameQuery $persistence_object_nameQuery) {
            ListRecordTotalBO<$persistence_class_nameBO> $persistence_object_nameListTotalRecord = this.$persistence_object_nameService.query$persistence_class_name($persistence_object_nameQuery);
            HtmlPagerResult<$persistence_class_nameVO> pager = this.$persistence_object_nameControllerAssemble.assembleHtmlPager($persistence_object_nameListTotalRecord, $persistence_object_nameQuery);
            ModelAndView mv = new ModelAndView("/$persistence_object_name/manage");
            mv.addObject("pager", pager);
            mv.addObject("query", $persistence_object_nameQuery);
            return mv;
        }
    
        @PostMapping("search.do")
        public ModelAndView search($persistence_class_nameQuery $persistence_object_nameQuery) {
            return this.query$persistence_class_names($persistence_object_nameQuery);
        }
    
        @PostMapping("save")
        public ModelAndView save$persistence_class_name($persistence_class_nameParam $persistence_object_nameParam) throws BusinessException {
            try {
                $persistence_object_nameService.save$persistence_class_name($persistence_object_nameParam);
                return ModelAndViewUtils.redirect("/$persistence_object_name/manage");
            } catch (Exception e) {
                //失败回显
                this.servletContainer.getRequest().setAttribute("$persistence_object_name", this.$persistence_object_nameControllerAssemble.paramAssembleVO($persistence_object_nameParam));
                throw e;
            }
        }

    @GetMapping("get")
    public $persistence_class_nameVO get$persistence_class_name(Long $persistence_object_nameId) throws BusinessException {
        $persistence_class_nameBO $persistence_object_nameBo = this.$persistence_object_nameService.get$persistence_class_name($persistence_object_nameId);
        return this.$persistence_object_nameControllerAssemble.boAssembleVO($persistence_object_nameBo);
    }

    @PostMapping("delete")
    public Integer delete$persistence_class_name(String $persistence_object_nameIds) throws BusinessException {
        return this.$persistence_object_nameService.delete$persistence_class_name($persistence_object_nameIds);
    }

    @PostMapping("enable")
    public Integer enable$persistence_class_name(String $persistence_object_nameIds) throws BusinessException {
        return this.$persistence_object_nameService.enable$persistence_class_name($persistence_object_nameIds);
    }

    @PostMapping("disable")
    public Integer disable$persistence_class_name(String $persistence_object_nameIds) throws BusinessException {
        return this.$persistence_object_nameService.disable$persistence_class_name($persistence_object_nameIds);
    }
}
